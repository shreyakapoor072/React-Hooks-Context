{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shreya/Documents/projects/react-context-hooks/booklist/src/components/BookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookForm = () => {\n  _s();\n\n  const {\n    dispatch\n  } = useContext(BookContext);\n  const [formValues, updateForm] = useState({\n    title: '',\n    author: ''\n  });\n\n  const updateFormValues = (e, field) => {\n    const val = e.target.value; // in useState hooks state does not get merged it gets replaced\n\n    updateForm({ ...formValues,\n      [field]: val\n    });\n  };\n\n  const addNewBook = e => {\n    e.preventDefault();\n    const {\n      title,\n      author\n    } = formValues;\n    if (!title && !author) return;\n    dispatch({\n      type: 'ADD_TODO',\n      book: {\n        title,\n        author\n      }\n    });\n    updateForm({\n      title: '',\n      author: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"title\",\n      value: formValues.title,\n      onChange: e => updateFormValues(e, 'title')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"author\",\n      value: formValues.author,\n      onChange: e => updateFormValues(e, 'author')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Add Book\",\n      onClick: addNewBook\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BookForm, \"1ERl38dhdUqh6tJbl62mdMbnUZw=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["/Users/shreya/Documents/projects/react-context-hooks/booklist/src/components/BookForm.js"],"names":["React","useContext","useState","BookContext","BookForm","dispatch","formValues","updateForm","title","author","updateFormValues","e","field","val","target","value","addNewBook","preventDefault","type","book"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,UAAU,CAACE,WAAD,CAA/B;AACA,QAAM,CAACG,UAAD,EAAaC,UAAb,IAA4BL,QAAQ,CAAC;AAACM,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAAD,CAA1C;;AAEA,QAAMC,gBAAgB,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACnC,UAAMC,GAAG,GAAGF,CAAC,CAACG,MAAF,CAASC,KAArB,CADmC,CAEnC;;AACAR,IAAAA,UAAU,CAAC,EAAC,GAAGD,UAAJ;AAAgB,OAACM,KAAD,GAAUC;AAA1B,KAAD,CAAV;AACH,GAJD;;AAMA,QAAMG,UAAU,GAAIL,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACM,cAAF;AACA,UAAM;AAAET,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBH,UAA1B;AACA,QAAG,CAACE,KAAD,IAAU,CAACC,MAAd,EAAsB;AACvBJ,IAAAA,QAAQ,CAAC;AAACa,MAAAA,IAAI,EAAC,UAAN;AAAkBC,MAAAA,IAAI,EAAE;AAACX,QAAAA,KAAD;AAAQC,QAAAA;AAAR;AAAxB,KAAD,CAAR;AACCF,IAAAA,UAAU,CAAC;AAACC,MAAAA,KAAK,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAD,CAAV;AACH,GAND;;AAOA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,OAA/B;AAAuC,MAAA,KAAK,EAAEH,UAAU,CAACE,KAAzD;AAAgE,MAAA,QAAQ,EAAGG,CAAD,IAAOD,gBAAgB,CAACC,CAAD,EAAI,OAAJ;AAAjG;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,QAA/B;AAAwC,MAAA,KAAK,EAAEL,UAAU,CAACG,MAA1D;AAAkE,MAAA,QAAQ,EAAGE,CAAD,IAAOD,gBAAgB,CAACC,CAAD,EAAI,QAAJ;AAAnG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,UAA3B;AAAsC,MAAA,OAAO,EAAEK;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAxBD;;GAAMZ,Q;;KAAAA,Q;AA0BN,eAAeA,QAAf","sourcesContent":["import React, {useContext, useState} from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookForm = () => {\n    const { dispatch } = useContext(BookContext);\n    const [formValues, updateForm ] = useState({title: '', author: ''});\n\n    const updateFormValues = (e, field) => {\n        const val = e.target.value;\n        // in useState hooks state does not get merged it gets replaced\n        updateForm({...formValues, [field] : val});\n    }\n\n    const addNewBook = (e) => {\n        e.preventDefault();\n        const { title, author } = formValues;\n        if(!title && !author) return;\n       dispatch({type:'ADD_TODO', book: {title, author}});\n        updateForm({title: '', author: ''});\n    }\n    return (\n        <form>\n            <input type=\"text\" placeholder=\"title\" value={formValues.title} onChange={(e) => updateFormValues(e, 'title')}/>\n            <input type=\"text\" placeholder=\"author\" value={formValues.author} onChange={(e) => updateFormValues(e, 'author')}/>\n            <input type=\"submit\" value=\"Add Book\" onClick={addNewBook} />\n        </form>\n    )\n}\n\nexport default BookForm;"]},"metadata":{},"sourceType":"module"}